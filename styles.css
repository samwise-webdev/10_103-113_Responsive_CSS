body {
    font-family: 'Open Sans', sans-serif;
}

h1 {
    text-align: center;
}

#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex; /* "turning it on" */
}

#container div { /* side note: if using flex-direction: column; (or column-reverse), the divs will NOT be 200px tall. They will compress to fit into the container */
    width: 200px;
    height: 200px;
}

/* The Flex Model

    flex-direction: row;
        Main Axis   horizontal           
        Cross Axis  vertical
        (left to right)

    flex-direction: reverse;
        Main Axis   horizontal           
        Cross Axis  vertical
        (right to left) 
        
    flex-direction: column;
        Main Axis   vertical           
        Cross Axis  horizontal
        (top to bottom)  
        
    flex-direction: column-reverse;
        Main Axis   vertical           
        Cross Axis  horizontal
        (bottom to top)
*/

/*Justify Content - determins how the content is distributed across the MAIN AXIS and is dependent on the main axis direction. so by default it is left to right, but if you did reverse it would go right to left. 

    justify-content: flex-start; (default)
        stacks from the start of the main axis

    justify-content: flex-end;
        stacks from the end of the main axis
    
    justify-content: center;
        stacks the content in the center of the main axis
    
    justify-content: space-between;
        takes all of the extra space and distributes it between the elements, but NOT on the outside edges

    justify-content: space-around;
        gives each element the same amount of space around it
    
    justify-content: space-evenly;
        distribute the extra space so that each element has the same amount of space around it and the edges of the container/parent (depending on axis direction)
*/

/* Flex wrap determins if the contents will wrap onto the next line

    flex-wrap: wrap;
        will allow the content to move onto a new line
            for example, usually flex box will squish the divs so they fit in the container. giving it flex-wrap: wrap; will keep their height and allow multiple lines of content

    flex-wrap: wrap-reverse;
        same but reverse
            example (flex-direction: row;): main axis left to right, cross axis normally top to bottom. wrap-reverse will wrap the items opposite of the way the cross axis is, causing the second row to be above the first

    flex-wrap: nowrap;
        does not allow wrapping
*/

/* Align Items distributes elements along the CROSS AXIS

    align-items: flex-start;
        default top to bottom

    align-items: flex-end;
        default bottom to top

    align-items: center;
        center (use with justify-content: center; to align centered both ways

    align-items: baseline;
        aligns items to the baseline of the text
    
*/

/* Align Content distributes space along the CROSS AXIS but only when we have multiple rows or columns (this only works with flex-wrap: wrap or wrap-reverse)

    align-content: center;
        aligns all columns/rows into the center

    align-content: space-between;
        does the same thing as the other space-between
*/

/* Align Self is applied to individual element(s) IN the container, and not the container itself. changes alignment on the CROSS AXIS for the element using it 

    align-self: flex-end;
    align-self: center;
    align-self: flex-start;
*/

